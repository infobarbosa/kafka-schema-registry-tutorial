/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.infobarbosa.kafka;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Cliente extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3695825092922588430L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Cliente\",\"namespace\":\"com.github.infobarbosa.kafka\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"identificacao sistemica do cliente.\"},{\"name\":\"cpf\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"cpf do cliente\"},{\"name\":\"primeiro_nome\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"primeiro nome do cliente\"},{\"name\":\"sobrenome\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"sobrenome do cliente\"}],\"version\":1}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Cliente> ENCODER =
      new BinaryMessageEncoder<Cliente>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Cliente> DECODER =
      new BinaryMessageDecoder<Cliente>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Cliente> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Cliente> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Cliente> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Cliente>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Cliente to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Cliente from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Cliente instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Cliente fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** identificacao sistemica do cliente. */
   private java.lang.String id;
  /** cpf do cliente */
   private java.lang.String cpf;
  /** primeiro nome do cliente */
   private java.lang.String primeiro_nome;
  /** sobrenome do cliente */
   private java.lang.String sobrenome;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Cliente() {}

  /**
   * All-args constructor.
   * @param id identificacao sistemica do cliente.
   * @param cpf cpf do cliente
   * @param primeiro_nome primeiro nome do cliente
   * @param sobrenome sobrenome do cliente
   */
  public Cliente(java.lang.String id, java.lang.String cpf, java.lang.String primeiro_nome, java.lang.String sobrenome) {
    this.id = id;
    this.cpf = cpf;
    this.primeiro_nome = primeiro_nome;
    this.sobrenome = sobrenome;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return cpf;
    case 2: return primeiro_nome;
    case 3: return sobrenome;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: cpf = value$ != null ? value$.toString() : null; break;
    case 2: primeiro_nome = value$ != null ? value$.toString() : null; break;
    case 3: sobrenome = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return identificacao sistemica do cliente.
   */
  public java.lang.String getId() {
    return id;
  }



  /**
   * Gets the value of the 'cpf' field.
   * @return cpf do cliente
   */
  public java.lang.String getCpf() {
    return cpf;
  }



  /**
   * Gets the value of the 'primeiro_nome' field.
   * @return primeiro nome do cliente
   */
  public java.lang.String getPrimeiroNome() {
    return primeiro_nome;
  }



  /**
   * Gets the value of the 'sobrenome' field.
   * @return sobrenome do cliente
   */
  public java.lang.String getSobrenome() {
    return sobrenome;
  }



  /**
   * Creates a new Cliente RecordBuilder.
   * @return A new Cliente RecordBuilder
   */
  public static com.github.infobarbosa.kafka.Cliente.Builder newBuilder() {
    return new com.github.infobarbosa.kafka.Cliente.Builder();
  }

  /**
   * Creates a new Cliente RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Cliente RecordBuilder
   */
  public static com.github.infobarbosa.kafka.Cliente.Builder newBuilder(com.github.infobarbosa.kafka.Cliente.Builder other) {
    if (other == null) {
      return new com.github.infobarbosa.kafka.Cliente.Builder();
    } else {
      return new com.github.infobarbosa.kafka.Cliente.Builder(other);
    }
  }

  /**
   * Creates a new Cliente RecordBuilder by copying an existing Cliente instance.
   * @param other The existing instance to copy.
   * @return A new Cliente RecordBuilder
   */
  public static com.github.infobarbosa.kafka.Cliente.Builder newBuilder(com.github.infobarbosa.kafka.Cliente other) {
    if (other == null) {
      return new com.github.infobarbosa.kafka.Cliente.Builder();
    } else {
      return new com.github.infobarbosa.kafka.Cliente.Builder(other);
    }
  }

  /**
   * RecordBuilder for Cliente instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Cliente>
    implements org.apache.avro.data.RecordBuilder<Cliente> {

    /** identificacao sistemica do cliente. */
    private java.lang.String id;
    /** cpf do cliente */
    private java.lang.String cpf;
    /** primeiro nome do cliente */
    private java.lang.String primeiro_nome;
    /** sobrenome do cliente */
    private java.lang.String sobrenome;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.infobarbosa.kafka.Cliente.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.cpf)) {
        this.cpf = data().deepCopy(fields()[1].schema(), other.cpf);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.primeiro_nome)) {
        this.primeiro_nome = data().deepCopy(fields()[2].schema(), other.primeiro_nome);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.sobrenome)) {
        this.sobrenome = data().deepCopy(fields()[3].schema(), other.sobrenome);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Cliente instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.infobarbosa.kafka.Cliente other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cpf)) {
        this.cpf = data().deepCopy(fields()[1].schema(), other.cpf);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.primeiro_nome)) {
        this.primeiro_nome = data().deepCopy(fields()[2].schema(), other.primeiro_nome);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sobrenome)) {
        this.sobrenome = data().deepCopy(fields()[3].schema(), other.sobrenome);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * identificacao sistemica do cliente.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * identificacao sistemica do cliente.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.github.infobarbosa.kafka.Cliente.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * identificacao sistemica do cliente.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * identificacao sistemica do cliente.
      * @return This builder.
      */
    public com.github.infobarbosa.kafka.Cliente.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cpf' field.
      * cpf do cliente
      * @return The value.
      */
    public java.lang.String getCpf() {
      return cpf;
    }


    /**
      * Sets the value of the 'cpf' field.
      * cpf do cliente
      * @param value The value of 'cpf'.
      * @return This builder.
      */
    public com.github.infobarbosa.kafka.Cliente.Builder setCpf(java.lang.String value) {
      validate(fields()[1], value);
      this.cpf = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cpf' field has been set.
      * cpf do cliente
      * @return True if the 'cpf' field has been set, false otherwise.
      */
    public boolean hasCpf() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cpf' field.
      * cpf do cliente
      * @return This builder.
      */
    public com.github.infobarbosa.kafka.Cliente.Builder clearCpf() {
      cpf = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'primeiro_nome' field.
      * primeiro nome do cliente
      * @return The value.
      */
    public java.lang.String getPrimeiroNome() {
      return primeiro_nome;
    }


    /**
      * Sets the value of the 'primeiro_nome' field.
      * primeiro nome do cliente
      * @param value The value of 'primeiro_nome'.
      * @return This builder.
      */
    public com.github.infobarbosa.kafka.Cliente.Builder setPrimeiroNome(java.lang.String value) {
      validate(fields()[2], value);
      this.primeiro_nome = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'primeiro_nome' field has been set.
      * primeiro nome do cliente
      * @return True if the 'primeiro_nome' field has been set, false otherwise.
      */
    public boolean hasPrimeiroNome() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'primeiro_nome' field.
      * primeiro nome do cliente
      * @return This builder.
      */
    public com.github.infobarbosa.kafka.Cliente.Builder clearPrimeiroNome() {
      primeiro_nome = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sobrenome' field.
      * sobrenome do cliente
      * @return The value.
      */
    public java.lang.String getSobrenome() {
      return sobrenome;
    }


    /**
      * Sets the value of the 'sobrenome' field.
      * sobrenome do cliente
      * @param value The value of 'sobrenome'.
      * @return This builder.
      */
    public com.github.infobarbosa.kafka.Cliente.Builder setSobrenome(java.lang.String value) {
      validate(fields()[3], value);
      this.sobrenome = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sobrenome' field has been set.
      * sobrenome do cliente
      * @return True if the 'sobrenome' field has been set, false otherwise.
      */
    public boolean hasSobrenome() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sobrenome' field.
      * sobrenome do cliente
      * @return This builder.
      */
    public com.github.infobarbosa.kafka.Cliente.Builder clearSobrenome() {
      sobrenome = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Cliente build() {
      try {
        Cliente record = new Cliente();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.cpf = fieldSetFlags()[1] ? this.cpf : (java.lang.String) defaultValue(fields()[1]);
        record.primeiro_nome = fieldSetFlags()[2] ? this.primeiro_nome : (java.lang.String) defaultValue(fields()[2]);
        record.sobrenome = fieldSetFlags()[3] ? this.sobrenome : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Cliente>
    WRITER$ = (org.apache.avro.io.DatumWriter<Cliente>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Cliente>
    READER$ = (org.apache.avro.io.DatumReader<Cliente>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.cpf);

    out.writeString(this.primeiro_nome);

    out.writeString(this.sobrenome);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString();

      this.cpf = in.readString();

      this.primeiro_nome = in.readString();

      this.sobrenome = in.readString();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString();
          break;

        case 1:
          this.cpf = in.readString();
          break;

        case 2:
          this.primeiro_nome = in.readString();
          break;

        case 3:
          this.sobrenome = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










